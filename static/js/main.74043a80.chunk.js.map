{"version":3,"sources":["components/Display/HistoryDisplay/HistoryDisplay.module.scss","components/Display/Display.module.scss","components/Button/Button.module.scss","containers/Memory/Memory.module.scss","containers/Keyboard/Keyboard.module.scss","App.module.scss","types/Operations.ts","_redux/actions/CalculatorActions.ts","_redux/actions/DisplayActions.ts","_redux/reducers/DisplayReducer.ts","_redux/actions/MemoryActions.ts","_redux/reducers/MemoryReducer.ts","_redux/actions/OperationsActions.ts","_redux/reducers/OperationsReducer.ts","_redux/actions/ValuesActions.ts","_redux/reducers/ValuesReducer.ts","_redux/reducers/RootReducer.ts","_redux/stores/CalculatorStore.js","components/Display/HistoryDisplay/HistoryDisplay.tsx","components/Display/Display.tsx","components/Button/Button.tsx","containers/Memory/Memory.tsx","containers/Keyboard/Keyboard.tsx","App.tsx","index.tsx"],"names":["module","exports","Operations","RESET_CALCULATOR","DELETE_LAST_CHAR_FROM_RESULT_DISPLAY","SET_RESULT_DISPLAY_VALUE","UPDATE_RESULT_DISPLAY_VALUE","CLEAR_HISTORY_DISPLAY_VALUE","SET_HISTORY_DISPLAY_VALUE","UPDATE_HISTORY_DISPLAY_VALUE","defaultState","historyDisplayValue","resultDisplayValue","ADD_VALUE_TO_MEMORY","CLEAR_VALUE_FROM_MEMORY","SAVE_VALUE_IN_MEMORY","SUB_VALUE_FROM_MEMORY","SET_NEW_OPERATION","UNSET_NEW_OPERATION_CLICKED","SET_EQUALS_CLICKED","UNSET_EQUALS_CLICKED","SET_SPECIAL_OPERATION_CLICKED","UNSET_SPECIAL_OPERATION_CLICKED","equalsClicked","newOperationClicked","operation","specialOperationClicked","CALCULATE_ONE_NUMBERED_OPERATION","CALCULATE_TWO_NUMBERED_OPERATION","REMEMBER_VALUE_WITHOUT_CALCULATION","CLEAR_PREV_VALUE","SET_PREV_VALUE","result","prevValue","performOneNumberedCalculation","value","baseValue","invertion","Number","squareRoot","Math","sqrt","squaredPower","pow","percent","String","performTwoNumberedCalculation","leftValue","rightValue","addition","subtraction","multiplication","division","RootReducer","combineReducers","operationsState","state","action","type","payload","displayState","length","slice","content","memoryValue","values","calculationResult","firstValueFilled","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","style","bemCssModules","HistoryDisplayStyles","HistoryDisplay","useSelector","store","className","DisplayStyles","Display","ButtonStyles","Button","props","modifiers","isEqual","isLighter","isMemory","onClick","onClickHandler","text","disabled","MemoryStyles","Memory","dispatch","useDispatch","KeyboardStyles","Keyboard","useEffect","handleClickNumber","currentTarget","handleOperationClick","updatedHistoryDisplayValue","handleSpecialOperations","clickedSpecialOperation","historyUpdateStartIndex","lastIndexOf","historyDisplayUpdate","unchangedHistory","valueToUpdate","trim","percentResult","negation","negatedValue","AppStyles","setSettings","modifierDelimiter","App","CalculatorStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74043a80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"historyDisplay\":\"HistoryDisplay_historyDisplay__3M5KK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__sr1N6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__28M4M\",\"button--is-lighter\":\"Button_button--is-lighter__NKj8y\",\"button--is-memory\":\"Button_button--is-memory__2HW5v\",\"button--is-equal\":\"Button_button--is-equal__3_Chq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"memory\":\"Memory_memory__1JHbf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"keyboard\":\"Keyboard_keyboard__1-bT0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2Vbcz\"};","export enum Operations {\r\n  addition = '+',\r\n  subtraction = '-',\r\n  multiplication = '*',\r\n  division = '/',\r\n  negation = '+/-',\r\n  squareRoot = 'sqrt',\r\n  percent = '%',\r\n  invertion = '1/x',\r\n  squaredPower = 'x2',\r\n}","import { ICalculatorAction } from './Interfaces/ICalculatorActions';\r\n\r\nexport const RESET_CALCULATOR = 'RESET_CALCULATOR';\r\n\r\nexport const resetCalculatorAction: ICalculatorAction = {\r\n  type: RESET_CALCULATOR\r\n}","import { IDisplayAction } from './Interfaces/ICalculatorActions';\r\n\r\n// result display\r\nexport const DELETE_LAST_CHAR_FROM_RESULT_DISPLAY = 'DELETE_LAST_CHAR_FROM_RESULT_DISPLAY';\r\nexport const SET_RESULT_DISPLAY_VALUE = 'SET_RESULT_DISPLAY_VALUE';\r\nexport const UPDATE_RESULT_DISPLAY_VALUE = 'UPDATE_RESULT_DISPLAY_VALUE';\r\n\r\nexport const deleteLastCharFromResultDisplayAction: IDisplayAction = {\r\n  type: DELETE_LAST_CHAR_FROM_RESULT_DISPLAY,\r\n}\r\n\r\nexport const updateResultDisplayValueAction: IDisplayAction = {\r\n  type: UPDATE_RESULT_DISPLAY_VALUE,\r\n  payload: {\r\n    content: '',\r\n    newOperationClicked: false\r\n  }\r\n}\r\n\r\nexport const setResultDisplayValueAction: IDisplayAction = {\r\n  type: SET_RESULT_DISPLAY_VALUE,\r\n  payload: {\r\n    content: ''\r\n  }\r\n}\r\n\r\n// history display\r\nexport const CLEAR_HISTORY_DISPLAY_VALUE = 'CLEAR_HISTORY_DISPLAY_VALUE';\r\nexport const SET_HISTORY_DISPLAY_VALUE = 'SET_HISTORY_DISPLAY_VALUE'\r\nexport const UPDATE_HISTORY_DISPLAY_VALUE = 'UPDATE_HISTORY_DISPLAY_VALUE';\r\n\r\nexport const clearHistoryDisplayValueAction: IDisplayAction = {\r\n  type: CLEAR_HISTORY_DISPLAY_VALUE\r\n}\r\n\r\nexport const setHistoryDisplayValueAction: IDisplayAction = {\r\n  type: SET_HISTORY_DISPLAY_VALUE,\r\n  payload: {\r\n    content: ''\r\n  }\r\n}\r\n\r\nexport const updateHistoryDisplayValueAction: IDisplayAction = {\r\n  type: UPDATE_HISTORY_DISPLAY_VALUE,\r\n  payload: {\r\n    content: ''\r\n  }\r\n}","//actions import\r\nimport { RESET_CALCULATOR } from '../actions/CalculatorActions';\r\nimport {\r\n  DELETE_LAST_CHAR_FROM_RESULT_DISPLAY, SET_RESULT_DISPLAY_VALUE, UPDATE_RESULT_DISPLAY_VALUE,\r\n  CLEAR_HISTORY_DISPLAY_VALUE, SET_HISTORY_DISPLAY_VALUE, UPDATE_HISTORY_DISPLAY_VALUE\r\n} from '../actions/DisplayActions';\r\n\r\n// interfaces import\r\nimport { IDisplayState } from './Interfaces/ICalculatorReducers';\r\nimport { IDisplayAction } from '../actions/Interfaces/ICalculatorActions';\r\n\r\nconst defaultState: IDisplayState = {\r\n  historyDisplayValue: '',\r\n  resultDisplayValue: '0'\r\n};\r\n\r\nexport const DisplayReducer = (state: IDisplayState = defaultState, action: IDisplayAction): IDisplayState => {\r\n  switch (action.type) {\r\n    case DELETE_LAST_CHAR_FROM_RESULT_DISPLAY: {\r\n      if (state.resultDisplayValue.length > 1) {\r\n        return { ...state, resultDisplayValue: state.resultDisplayValue.slice(0, state.resultDisplayValue.length - 1) };\r\n      } else {\r\n        return { ...state, resultDisplayValue: defaultState.resultDisplayValue };;\r\n      }\r\n    }\r\n    case SET_RESULT_DISPLAY_VALUE: {\r\n      if (action.payload) {\r\n        return { ...state, resultDisplayValue: action.payload.content };\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case UPDATE_RESULT_DISPLAY_VALUE: {\r\n      if (action.payload) {\r\n        if (state.resultDisplayValue === defaultState.resultDisplayValue || action.payload?.newOperationClicked) {\r\n          if (state.resultDisplayValue === defaultState.resultDisplayValue && action.payload.content === '.') {\r\n            return { ...state, resultDisplayValue: '0.' };\r\n          } else {\r\n            return { ...state, resultDisplayValue: action.payload?.content };\r\n          }\r\n        }\r\n        else {\r\n          return { ...state, resultDisplayValue: state.resultDisplayValue += action.payload?.content };\r\n        }\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case CLEAR_HISTORY_DISPLAY_VALUE: return { ...state, historyDisplayValue: defaultState.historyDisplayValue };\r\n    case UPDATE_HISTORY_DISPLAY_VALUE: return { ...state, historyDisplayValue: `${state.historyDisplayValue}${action.payload?.content}` };\r\n    case SET_HISTORY_DISPLAY_VALUE:\r\n      if (action.payload) {\r\n        return { ...state, historyDisplayValue: action.payload?.content }\r\n      } else {\r\n        return state;\r\n      }\r\n    case RESET_CALCULATOR: return defaultState;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { IMemoryAction } from './Interfaces/ICalculatorActions';\r\n\r\nexport const ADD_VALUE_TO_MEMORY = 'ADD_VALUE_TO_MEMORY';\r\nexport const CLEAR_VALUE_FROM_MEMORY = 'CLEAR_VALUE_FROM_MEMORY';\r\nexport const SAVE_VALUE_IN_MEMORY = 'SAVE_VALUE_IN_MEMORY';\r\nexport const SUB_VALUE_FROM_MEMORY = 'SUB_VALUE_FROM_MEMORY';\r\n\r\nexport const addValueToMemoryAction: IMemoryAction = {\r\n  type: ADD_VALUE_TO_MEMORY,\r\n  payload: {\r\n    value: '0'\r\n  }\r\n}\r\n\r\nexport const clearValueFromMemoryAction: IMemoryAction = {\r\n  type: CLEAR_VALUE_FROM_MEMORY\r\n}\r\n\r\nexport const saveValueInMemoryAction: IMemoryAction = {\r\n  type: SAVE_VALUE_IN_MEMORY,\r\n  payload: {\r\n    value: '0'\r\n  }\r\n}\r\n\r\nexport const subValueFronMemoryAction: IMemoryAction = {\r\n  type: SUB_VALUE_FROM_MEMORY,\r\n  payload: {\r\n    value: '0'\r\n  }\r\n}\r\n\r\n","//actions import\r\nimport { ADD_VALUE_TO_MEMORY, CLEAR_VALUE_FROM_MEMORY, SAVE_VALUE_IN_MEMORY, SUB_VALUE_FROM_MEMORY } from '../actions/MemoryActions';\r\n\r\n// interfaces import\r\nimport { IMemoryAction } from '../actions/Interfaces/ICalculatorActions';\r\n\r\nconst defaultState: string | null = null\r\n\r\nexport const MemoryReducer = (state = defaultState, action: IMemoryAction): string | null => {\r\n  switch (action.type) {\r\n    case ADD_VALUE_TO_MEMORY: return String(Number(state) + Number(action.payload?.value));\r\n    case CLEAR_VALUE_FROM_MEMORY: return defaultState;\r\n    case SAVE_VALUE_IN_MEMORY: {\r\n      if (action.payload) return action.payload?.value;\r\n      else return state;\r\n    }\r\n    case SUB_VALUE_FROM_MEMORY: return String(Number(state) - Number(action.payload?.value));\r\n    default: return state;\r\n  }\r\n}","import { IOperationAction } from \"./Interfaces/ICalculatorActions\";\r\n\r\nexport const SET_NEW_OPERATION = 'SET_NEW_OPERATION';\r\n\r\nexport const UNSET_NEW_OPERATION_CLICKED = 'UNSET_NEW_OPERATION_CLICKED';\r\n\r\nexport const SET_EQUALS_CLICKED = 'SET_EQUALS_CLICKED';\r\nexport const UNSET_EQUALS_CLICKED = 'UNSET_EQUALS_CLICKED';\r\n\r\nexport const SET_SPECIAL_OPERATION_CLICKED = 'SET_SPECIAL_OPERATION_CLICKED';\r\nexport const UNSET_SPECIAL_OPERATION_CLICKED = 'UNSET_SPECIAL_OPERATION_CLICKED';\r\n\r\nexport const setEqualsClickedAction: IOperationAction = {\r\n  type: SET_EQUALS_CLICKED\r\n}\r\n\r\n\r\nexport const setNewOperationAction: IOperationAction = {\r\n  type: SET_NEW_OPERATION,\r\n  payload: {\r\n    operation: ''\r\n  }\r\n};\r\n\r\nexport const unsetNewOperationClickedAction: IOperationAction = {\r\n  type: UNSET_NEW_OPERATION_CLICKED\r\n}\r\n\r\nexport const unsetEqualsClickedAction: IOperationAction = {\r\n  type: UNSET_EQUALS_CLICKED\r\n}\r\n\r\nexport const unsetSpecialOperationClickedAction: IOperationAction = {\r\n  type: UNSET_EQUALS_CLICKED\r\n}","//actions import\r\nimport { RESET_CALCULATOR } from '../actions/CalculatorActions';\r\nimport {\r\n  SET_NEW_OPERATION, SET_EQUALS_CLICKED, UNSET_EQUALS_CLICKED, UNSET_NEW_OPERATION_CLICKED,\r\n  SET_SPECIAL_OPERATION_CLICKED, UNSET_SPECIAL_OPERATION_CLICKED\r\n} from '../actions/OperationsActions';\r\n\r\n//interfaces import\r\nimport { IOperationState } from './Interfaces/ICalculatorReducers';\r\nimport { IOperationAction } from '../actions/Interfaces/ICalculatorActions';\r\n\r\nconst defaultState: IOperationState = {\r\n  equalsClicked: false,\r\n  newOperationClicked: false,\r\n  operation: null,\r\n  specialOperationClicked: false\r\n};\r\n\r\nexport const OperationsReducer = (state: IOperationState = defaultState, action: IOperationAction): IOperationState => {\r\n  switch (action.type) {\r\n    case SET_NEW_OPERATION:\r\n      if (action.payload) return { ...state, equalsClicked: false, newOperationClicked: true, operation: action.payload?.operation }\r\n      else return { ...state, equalsClicked: false, newOperationClicked: true };\r\n\r\n    case SET_EQUALS_CLICKED:\r\n      return { ...state, equalsClicked: true }\r\n\r\n    case UNSET_EQUALS_CLICKED:\r\n      return { ...state, equalsClicked: false }\r\n\r\n    case UNSET_NEW_OPERATION_CLICKED:\r\n      return { ...state, equalsClicked: false, newOperationClicked: false };\r\n\r\n    case SET_SPECIAL_OPERATION_CLICKED:\r\n      return { ...state, specialOperationClicked: true }\r\n\r\n    case UNSET_SPECIAL_OPERATION_CLICKED:\r\n      return { ...state, specialOperationClicked: false }\r\n\r\n    case RESET_CALCULATOR: return defaultState;\r\n    default: return state;\r\n  }\r\n}","import { IValuesAction } from './Interfaces/ICalculatorActions';\r\n\r\nexport const CALCULATE_ONE_NUMBERED_OPERATION = 'CALCULATE_ONE_NUMBERED_OPERATION';\r\nexport const CALCULATE_TWO_NUMBERED_OPERATION = 'CALCULATE_TWO_NUMBERED_OPERATION';\r\nexport const REMEMBER_VALUE_WITHOUT_CALCULATION = 'REMEMBER_VALUE_WITHOUT_CALCULATION';\r\n\r\nexport const CLEAR_PREV_VALUE = 'CLEAR_PREV_VALUE';\r\nexport const SET_PREV_VALUE = 'SET_PREV_VALUE';\r\n\r\nexport const calculateTwoNumberedOperationAction: IValuesAction = {\r\n  type: CALCULATE_TWO_NUMBERED_OPERATION,\r\n  payload: {\r\n    leftValue: '0',\r\n    rightValue: '0',\r\n    operation: ''\r\n  }\r\n}\r\n\r\nexport const calculateOneNumberedOperation: IValuesAction = {\r\n  type: CALCULATE_ONE_NUMBERED_OPERATION,\r\n  payload: {\r\n    leftValue: '0',\r\n    operation: ''\r\n  }\r\n}\r\n\r\nexport const rememberValueWithoutCalculationAction: IValuesAction = {\r\n  type: REMEMBER_VALUE_WITHOUT_CALCULATION,\r\n  payload: {\r\n    leftValue: '0',\r\n  }\r\n}\r\n\r\nexport const clearPrevValueAction: IValuesAction = {\r\n  type: CLEAR_PREV_VALUE\r\n}\r\n\r\nexport const setValueAction: IValuesAction = {\r\n  type: SET_PREV_VALUE,\r\n  payload: {\r\n    leftValue: '0'\r\n  }\r\n};","// actions import\r\nimport { RESET_CALCULATOR } from '../actions/CalculatorActions';\r\nimport {\r\n  CALCULATE_ONE_NUMBERED_OPERATION, CALCULATE_TWO_NUMBERED_OPERATION,\r\n  CLEAR_PREV_VALUE, REMEMBER_VALUE_WITHOUT_CALCULATION, SET_PREV_VALUE\r\n} from '../actions/ValuesActions';\r\n\r\n// interfaces import\r\nimport { IValuesAction } from '../actions/Interfaces/ICalculatorActions';\r\nimport { IValuesState } from './Interfaces/ICalculatorReducers';\r\n\r\nimport { Operations } from '../../types/Operations';\r\n\r\nconst defaultState: IValuesState = {\r\n  result: null,\r\n  prevValue: null\r\n};\r\n\r\nexport const ValuesReducer = (state: IValuesState = defaultState, action: IValuesAction): IValuesState => {\r\n  switch (action.type) {\r\n    case CALCULATE_ONE_NUMBERED_OPERATION: {\r\n      if (action.payload && action.payload.leftValue && action.payload.operation) {\r\n        if (action.payload.operation !== Operations.percent) {\r\n          const calculationResult = performOneNumberedCalculation(action.payload.leftValue, action.payload.operation);\r\n\r\n          if (!action.payload.firstValueFilled) {\r\n            return { result: calculationResult, prevValue: defaultState.prevValue };\r\n          } else {\r\n            return { ...state, prevValue: calculationResult }\r\n          }\r\n        } else {\r\n\r\n          const calculationResult = performOneNumberedCalculation(action.payload.leftValue, action.payload.operation, state.result);\r\n          if (!state.result) {\r\n            return { result: calculationResult, prevValue: defaultState.prevValue };\r\n          } else {\r\n            return { ...state, prevValue: calculationResult }\r\n          }\r\n        }\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case CALCULATE_TWO_NUMBERED_OPERATION: {\r\n      if (action.payload && action.payload.leftValue && action.payload.rightValue && action.payload.operation) {\r\n        const calculationResult = performTwoNumberedCalculation(action.payload.leftValue, action.payload.rightValue, action.payload.operation);\r\n        return { ...state, result: calculationResult }\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case REMEMBER_VALUE_WITHOUT_CALCULATION: {\r\n      if (action.payload?.leftValue) {\r\n        return { ...state, result: action.payload.leftValue }\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case SET_PREV_VALUE: {\r\n      if (action.payload && action.payload.leftValue) {\r\n        return { ...state, prevValue: action.payload?.leftValue };\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n    case CLEAR_PREV_VALUE: return { ...state, prevValue: defaultState.prevValue };\r\n    case RESET_CALCULATOR: return defaultState;\r\n    default: return state;\r\n  }\r\n}\r\n\r\n\r\nconst performOneNumberedCalculation = (value: string, operation: string, baseValue?: string | null): string => {\r\n  let result: number = 0;\r\n\r\n  switch (operation) {\r\n    case Operations.invertion:\r\n      result = 1 / Number(value);\r\n      break;\r\n    case Operations.squareRoot:\r\n      result = Math.sqrt(Number(value));\r\n      break;\r\n    case Operations.squaredPower:\r\n      result = Math.pow(Number(value), 2);\r\n      break;\r\n    case Operations.percent:\r\n      if (baseValue && baseValue !== null) {\r\n        result = Number(value) * Number(baseValue) / 100;\r\n      } else {\r\n        result = 0;\r\n      }\r\n  }\r\n\r\n  return String(result);\r\n}\r\n\r\nconst performTwoNumberedCalculation = (leftValue: string, rightValue: string, operation: string): string => {\r\n  let result: number = 0;\r\n\r\n  switch (operation) {\r\n    case Operations.addition:\r\n      result = Number(leftValue) + Number(rightValue);\r\n      break;\r\n    case Operations.subtraction:\r\n      result = Number(leftValue) - Number(rightValue);\r\n      break;\r\n    case Operations.multiplication:\r\n      result = Number(leftValue) * Number(rightValue);\r\n      break;\r\n    case Operations.division:\r\n      result = Number(leftValue) / Number(rightValue);\r\n      break;\r\n\r\n    default: return '0'\r\n  }\r\n\r\n  return String(result);\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { DisplayReducer } from './DisplayReducer';\r\nimport { MemoryReducer } from './MemoryReducer';\r\nimport { OperationsReducer } from './OperationsReducer';\r\nimport { ValuesReducer } from './ValuesReducer';\r\n\r\nexport const RootReducer = combineReducers({\r\n  operationsState: OperationsReducer,\r\n  displayState: DisplayReducer,\r\n  memoryValue: MemoryReducer,\r\n  values: ValuesReducer,\r\n})\r\n\r\n\r\n","import { createStore } from 'redux';\r\n\r\nimport { RootReducer } from '../reducers/RootReducer';\r\n\r\nexport default createStore(RootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { default as bemCssModules } from 'bem-css-modules'\r\n\r\nimport { IRootStore } from '../../../_redux/stores/Interfaces/IRootStore';\r\n\r\nimport { default as HistoryDisplayStyles } from './HistoryDisplay.module.scss';\r\n\r\nconst style = bemCssModules(HistoryDisplayStyles);\r\n\r\nconst HistoryDisplay: React.FC = () => {\r\n  const historyDisplayValue = useSelector((store: IRootStore) => store.displayState.historyDisplayValue);\r\n\r\n  return (\r\n    <div className={style()}>{historyDisplayValue}</div>\r\n  );\r\n}\r\n\r\nexport default HistoryDisplay;","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\n\r\nimport { IRootStore } from '../../_redux/stores/Interfaces/IRootStore';\r\n\r\nimport HistoryDisplay from './HistoryDisplay/HistoryDisplay';\r\n\r\nimport { default as DisplayStyles } from './Display.module.scss';\r\n\r\nconst style = bemCssModules(DisplayStyles);\r\n\r\n\r\nconst Display: React.FC = () => {\r\n  const resultDisplayValue = useSelector((store: IRootStore) => store.displayState.resultDisplayValue);\r\n\r\n  return (\r\n    <div className={style()}>\r\n      <HistoryDisplay />\r\n      <p>{resultDisplayValue}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;","import React from 'react'\r\n\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\n\r\nimport { default as ButtonStyles } from './Button.module.scss';\r\n\r\nconst style = bemCssModules(ButtonStyles);\r\n\r\ntype TButtonHandler = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n// type TButtonHandler = () => void\r\n\r\ninterface ButtonProps {\r\n  text: string;\r\n  onClickHandler: TButtonHandler;\r\n  isEqual?: boolean;\r\n  isLighter?: boolean;\r\n  isMemory?: boolean;\r\n  disabled?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = props => {\r\n  const modifiers = {\r\n    'is-equal': props.isEqual,\r\n    'is-lighter': props.isLighter,\r\n    'is-memory': props.isMemory\r\n  }\r\n\r\n  return (\r\n    <button className={style(modifiers)} onClick={props.onClickHandler} value={props.text} disabled={props.disabled}>{props.text}</button>\r\n  );\r\n}","// react\r\nimport React from 'react'\r\n\r\n// redux hooks\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// redux actions\r\nimport { SET_RESULT_DISPLAY_VALUE } from '../../_redux/actions/DisplayActions';\r\nimport { ADD_VALUE_TO_MEMORY, CLEAR_VALUE_FROM_MEMORY, SAVE_VALUE_IN_MEMORY, SUB_VALUE_FROM_MEMORY } from '../../_redux/actions/MemoryActions';\r\nimport { SET_NEW_OPERATION } from '../../_redux/actions/OperationsActions';\r\n\r\n// components\r\nimport { Button } from '../../components/Button/Button';\r\n\r\n// styles\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\nimport { default as MemoryStyles } from './Memory.module.scss';\r\n\r\n// interfaces\r\nimport { IRootStore } from '../../_redux/stores/Interfaces/IRootStore';\r\n\r\n\r\nconst style = bemCssModules(MemoryStyles);\r\n\r\nexport const Memory: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const memoryValue = useSelector((store: IRootStore) => store.memoryValue);\r\n  const resultDisplayValue = useSelector((store: IRootStore) => store.displayState.resultDisplayValue);\r\n\r\n  const handleSaveInMemory = () => {\r\n    dispatch({ type: SAVE_VALUE_IN_MEMORY, payload: { value: resultDisplayValue } });\r\n    dispatch({ type: SET_NEW_OPERATION });\r\n  }\r\n\r\n  const addValueToMemory = () => {\r\n    dispatch({ type: ADD_VALUE_TO_MEMORY, payload: { value: resultDisplayValue } });\r\n    dispatch({ type: SET_NEW_OPERATION });\r\n  }\r\n\r\n  const subValueToMemory = () => {\r\n    dispatch({ type: SUB_VALUE_FROM_MEMORY, payload: { value: resultDisplayValue } });\r\n    dispatch({ type: SET_NEW_OPERATION });\r\n  }\r\n\r\n  const clearMemory = () => {\r\n    dispatch({ type: CLEAR_VALUE_FROM_MEMORY });\r\n    dispatch({ type: SET_NEW_OPERATION });\r\n  }\r\n\r\n  const readMemory = () => {\r\n    dispatch({ type: SET_RESULT_DISPLAY_VALUE, payload: { content: memoryValue } });\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={style()}>\r\n      <Button text=\"MC\" onClickHandler={clearMemory} isMemory disabled={!memoryValue ? true : false} />\r\n      <Button text=\"MR\" onClickHandler={readMemory} isMemory disabled={!memoryValue ? true : false} />\r\n      <Button text=\"M+\" onClickHandler={addValueToMemory} isMemory />\r\n      <Button text=\"M-\" onClickHandler={subValueToMemory} isMemory />\r\n      <Button text=\"MS\" onClickHandler={handleSaveInMemory} isMemory />\r\n    </div>\r\n  );\r\n}","// react and react hooks\r\nimport React, { useEffect } from 'react';\r\n\r\n// redux and redux hooks\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// redux actions\r\nimport { RESET_CALCULATOR } from '../../_redux/actions/CalculatorActions';\r\nimport {\r\n  DELETE_LAST_CHAR_FROM_RESULT_DISPLAY, SET_RESULT_DISPLAY_VALUE, UPDATE_RESULT_DISPLAY_VALUE,\r\n  CLEAR_HISTORY_DISPLAY_VALUE, SET_HISTORY_DISPLAY_VALUE, UPDATE_HISTORY_DISPLAY_VALUE,\r\n} from '../../_redux/actions/DisplayActions';\r\nimport {\r\n  CALCULATE_ONE_NUMBERED_OPERATION, CALCULATE_TWO_NUMBERED_OPERATION, REMEMBER_VALUE_WITHOUT_CALCULATION,\r\n  SET_PREV_VALUE, CLEAR_PREV_VALUE\r\n} from '../../_redux/actions/ValuesActions';\r\nimport { SET_EQUALS_CLICKED, SET_NEW_OPERATION, SET_SPECIAL_OPERATION_CLICKED, UNSET_EQUALS_CLICKED, UNSET_NEW_OPERATION_CLICKED, UNSET_SPECIAL_OPERATION_CLICKED } from '../../_redux/actions/OperationsActions';\r\n\r\n// components\r\nimport { Button } from '../../components/Button/Button';\r\n\r\n// styles\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\nimport { default as KeyboardStyles } from './Keyboard.module.scss';\r\n\r\n// interfaces\r\nimport { IOperationState } from '../../_redux/reducers/Interfaces/ICalculatorReducers';\r\nimport { IRootStore } from '../../_redux/stores/Interfaces/IRootStore';\r\n\r\nimport { Operations } from '../../types/Operations';\r\n\r\nconst style = bemCssModules(KeyboardStyles);\r\n\r\nexport const Keyboard: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { historyDisplayValue, resultDisplayValue } = useSelector((store: IRootStore) => store.displayState);\r\n  const { equalsClicked, newOperationClicked, operation, specialOperationClicked }: IOperationState = useSelector((store: IRootStore) => store.operationsState);\r\n  const { result, prevValue } = useSelector((store: IRootStore) => store.values);\r\n\r\n\r\n  /**\r\n   * Description: Calls callback function every change of result state\r\n   * Parameters: \r\n   * - callback function\r\n   * - dependency array\r\n   * Returns: void\r\n   */\r\n  useEffect(() => {\r\n    // update display when result has been updated only \r\n    if (result !== null) {\r\n      dispatch({ type: SET_RESULT_DISPLAY_VALUE, payload: { content: result } });\r\n    }\r\n  }, [dispatch, result])\r\n\r\n  useEffect(() => {\r\n    // update display when prevValue has been updated only \r\n    if (specialOperationClicked && prevValue !== null) {\r\n      dispatch({ type: SET_RESULT_DISPLAY_VALUE, payload: { content: prevValue } });\r\n    }\r\n  }, [dispatch, specialOperationClicked, prevValue])\r\n\r\n  /**\r\n   * Description: Resets calculator to initial state\r\n   * Parameters: none\r\n   * Returns: void\r\n   */\r\n  const handleClearCalculator = (): void => {\r\n    dispatch({ type: RESET_CALCULATOR });\r\n  }\r\n\r\n  /**\r\n   * Description: Clears result presented on display\r\n   * Parameters: none\r\n   * Returns: void\r\n   */\r\n  const handleClearEntry = (): void => {\r\n    dispatch({ type: SET_RESULT_DISPLAY_VALUE, payload: { content: '0' } })\r\n  }\r\n\r\n  /**\r\n   * Description: Number button handler. Updates display with clicked number.\r\n   * Parameters:\r\n   * - currentTarget: target of click which stores button value\r\n   * Returns: void\r\n   */\r\n  const handleClickNumber = ({ currentTarget }: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n\r\n    dispatch({ type: UNSET_SPECIAL_OPERATION_CLICKED });\r\n    // if new operation has been clicked remove flag\r\n    if (newOperationClicked) {\r\n      dispatch({ type: UNSET_NEW_OPERATION_CLICKED });\r\n      dispatch({ type: CLEAR_PREV_VALUE });\r\n    } else if (equalsClicked || specialOperationClicked) {\r\n      dispatch({ type: RESET_CALCULATOR });\r\n    }\r\n    // and show new typed value as new one on display\r\n    dispatch({ type: UPDATE_RESULT_DISPLAY_VALUE, payload: { content: currentTarget.value, newOperationClicked: newOperationClicked } });\r\n  }\r\n\r\n  /**\r\n   * Description: Equals button handler. Calls calculating result and update display actions.\r\n   * Parameters: none\r\n   * Returns: void\r\n   */\r\n  const handleEqualsClick = (): void => {\r\n    const leftValue = result;\r\n    // if equals has been clicked again perform last operation\r\n    const rightValue = prevValue ? prevValue : resultDisplayValue;\r\n\r\n    if (!equalsClicked) {\r\n      // remember that equals has been clicked\r\n      dispatch({ type: SET_EQUALS_CLICKED })\r\n      // remember right value\r\n      dispatch({ type: SET_PREV_VALUE, payload: { leftValue: rightValue } });\r\n\r\n      if (!specialOperationClicked) {\r\n        dispatch({ type: UPDATE_HISTORY_DISPLAY_VALUE, payload: { content: `${resultDisplayValue} = ` } })\r\n      } else {\r\n        dispatch({ type: UPDATE_HISTORY_DISPLAY_VALUE, payload: { content: `= ` } })\r\n      }\r\n    } else {\r\n      dispatch({ type: SET_HISTORY_DISPLAY_VALUE, payload: { content: `${leftValue} ${operation} ${rightValue} = ` } })\r\n    }\r\n\r\n    if (rightValue && operation) {\r\n      dispatch({\r\n        type: CALCULATE_TWO_NUMBERED_OPERATION,\r\n        payload: {\r\n          leftValue: leftValue,\r\n          rightValue: rightValue,\r\n          operation\r\n        }\r\n      });\r\n    }\r\n\r\n    dispatch({ type: UNSET_SPECIAL_OPERATION_CLICKED });\r\n  }\r\n\r\n  /**\r\n   * Description: Calculates negation of result display value\r\n   * Parameters: none\r\n   * Returns: void\r\n   */\r\n  const handleNegation = (): void => {\r\n    const negatedValue = String(Number(resultDisplayValue) * -1);\r\n\r\n    // if display shows saved calculation result\r\n    if (equalsClicked) {\r\n      dispatch({ type: REMEMBER_VALUE_WITHOUT_CALCULATION, payload: { leftValue: negatedValue } });\r\n    }\r\n    // if display shows not saved newly typed value  \r\n    else {\r\n      dispatch({ type: SET_RESULT_DISPLAY_VALUE, payload: { content: negatedValue } })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description: Operation click handler. Calculates result if two numbers have been filled and updates history display.\r\n   * Parameters: \r\n   * - currentTarget: target of click which stores button value\r\n   * Returns: void\r\n   */\r\n  const handleOperationClick = ({ currentTarget }: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n\r\n    dispatch({ type: UNSET_SPECIAL_OPERATION_CLICKED });\r\n    // new operation has been clicked - remember state and operation value\r\n    dispatch({ type: SET_NEW_OPERATION, payload: { operation: currentTarget.value } });\r\n\r\n    if (!newOperationClicked && !equalsClicked) {\r\n      // if no result has not been calculated yet, take display value and remember it\r\n      if (result === null) {\r\n        dispatch({ type: REMEMBER_VALUE_WITHOUT_CALCULATION, payload: { leftValue: resultDisplayValue } });\r\n      } else {\r\n        // perform calculation when left value is saved and right value is available on display\r\n\r\n        dispatch({\r\n          type: CALCULATE_TWO_NUMBERED_OPERATION,\r\n          payload: {\r\n            leftValue: result,\r\n            rightValue: resultDisplayValue,\r\n            operation\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!specialOperationClicked) {\r\n        dispatch({ type: UPDATE_HISTORY_DISPLAY_VALUE, payload: { content: `${resultDisplayValue} ${currentTarget.value} ` } });\r\n      } else {\r\n        dispatch({ type: UPDATE_HISTORY_DISPLAY_VALUE, payload: { content: `${currentTarget.value} ` } });\r\n      }\r\n    } else if (equalsClicked) {\r\n      // user has chosen new operation on calculation result - update subdisplay (result and operation)\r\n      dispatch({ type: SET_HISTORY_DISPLAY_VALUE, payload: { content: `${resultDisplayValue} ${currentTarget.value} ` } });\r\n    } else {\r\n      // user changed operation - update subdisplay - (only two last chars)\r\n      const updatedHistoryDisplayValue = `${historyDisplayValue.slice(0, historyDisplayValue.length - 2)} ${currentTarget.value} `;\r\n      dispatch({ type: SET_HISTORY_DISPLAY_VALUE, payload: { content: updatedHistoryDisplayValue } })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description: Removes last char of result display or clears history when equals was clicked\r\n   * Parameters: none\r\n   * Returns: void\r\n   */\r\n  const handleRemoveLastChar = (): void => {\r\n    if (equalsClicked && historyDisplayValue) {\r\n      dispatch({ type: CLEAR_HISTORY_DISPLAY_VALUE });\r\n    } else {\r\n      if (!equalsClicked && !newOperationClicked && !specialOperationClicked) {\r\n        dispatch({ type: DELETE_LAST_CHAR_FROM_RESULT_DISPLAY });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description: Handles special operations such sqrt, sqr, percent and invertion. \r\n   * Parameters: \r\n   * - currentTarget: target of click which stores button value\r\n   * Returns: void\r\n   */\r\n  const handleSpecialOperations = ({ currentTarget }: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n    const clickedSpecialOperation = currentTarget.value;\r\n    dispatch({ type: SET_SPECIAL_OPERATION_CLICKED })\r\n\r\n    // 0 - value stays the same as before\r\n    const historyUpdateStartIndex = operation ? historyDisplayValue.lastIndexOf(operation) + 2 : 0;\r\n    let historyDisplayUpdate = '';\r\n\r\n    const unchangedHistory = historyUpdateStartIndex > 0 ? historyDisplayValue.slice(0, historyUpdateStartIndex) : '';\r\n    const valueToUpdate = (historyDisplayValue.slice(historyUpdateStartIndex).length > 0) ?\r\n      historyDisplayValue.slice(historyUpdateStartIndex) : resultDisplayValue;\r\n\r\n    switch (clickedSpecialOperation) {\r\n      case Operations.squareRoot:\r\n        historyDisplayUpdate = `${unchangedHistory}sqrt(${valueToUpdate.trim()}) `\r\n        break;\r\n      case Operations.squaredPower:\r\n        historyDisplayUpdate = `${unchangedHistory}sqr(${valueToUpdate.trim()}) `\r\n        break;\r\n      case Operations.invertion:\r\n        historyDisplayUpdate = `${unchangedHistory}1/(${valueToUpdate.trim()}) `\r\n        break;\r\n      case Operations.percent:\r\n        if (result) {\r\n          const percentResult = String(Number(resultDisplayValue) * Number(result) / 100);\r\n          historyDisplayUpdate = `${unchangedHistory}${percentResult}  `;\r\n        }\r\n        else {\r\n          historyDisplayUpdate = `0  `;\r\n        }\r\n        break;\r\n    }\r\n\r\n    if (equalsClicked) {\r\n      dispatch({ type: CLEAR_PREV_VALUE });\r\n      dispatch({ type: UNSET_EQUALS_CLICKED });\r\n    }\r\n\r\n    dispatch({ type: SET_HISTORY_DISPLAY_VALUE, payload: { content: historyDisplayUpdate } });\r\n\r\n    dispatch({\r\n      type: CALCULATE_ONE_NUMBERED_OPERATION, payload: {\r\n        leftValue: resultDisplayValue,\r\n        operation: clickedSpecialOperation,\r\n        firstValueFilled: (!equalsClicked) && (result !== null && operation !== null) ? true : false\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className={style()}>\r\n      <Button text={Operations.percent} onClickHandler={handleSpecialOperations} />\r\n      <Button text=\"CE\" onClickHandler={handleClearEntry} />\r\n      <Button text=\"C\" onClickHandler={handleClearCalculator} />\r\n      <Button text=\"<-\" onClickHandler={handleRemoveLastChar} />\r\n      <Button text={Operations.invertion} onClickHandler={handleSpecialOperations} />\r\n      <Button text={Operations.squaredPower} onClickHandler={handleSpecialOperations} />\r\n      <Button text={Operations.squareRoot} onClickHandler={handleSpecialOperations} />\r\n      <Button text={Operations.division} onClickHandler={handleOperationClick} />\r\n      <Button text=\"7\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"8\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"9\" onClickHandler={handleClickNumber} />\r\n      <Button text={Operations.multiplication} onClickHandler={handleOperationClick} />\r\n      <Button text=\"4\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"5\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"6\" onClickHandler={handleClickNumber} />\r\n      <Button text={Operations.subtraction} onClickHandler={handleOperationClick} />\r\n      <Button text=\"1\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"2\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"3\" onClickHandler={handleClickNumber} />\r\n      <Button text={Operations.addition} onClickHandler={handleOperationClick} />\r\n      <Button text={Operations.negation} onClickHandler={handleNegation} />\r\n      <Button text=\"0\" onClickHandler={handleClickNumber} />\r\n      <Button text=\".\" onClickHandler={handleClickNumber} />\r\n      <Button text=\"=\" onClickHandler={handleEqualsClick} isEqual />\r\n    </div>\r\n  );\r\n}","\r\nimport React from 'react';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport CalculatorStore from './_redux/stores/CalculatorStore';\r\n\r\nimport { default as bemCssModules } from 'bem-css-modules';\r\n\r\nimport Display from './components/Display/Display';\r\nimport { Memory } from './containers/Memory/Memory';\r\nimport { Keyboard } from './containers/Keyboard/Keyboard';\r\n\r\nimport { default as AppStyles } from './App.module.scss';\r\n\r\nconst style = bemCssModules(AppStyles);\r\n\r\nbemCssModules.setSettings({\r\n  modifierDelimiter: '--'\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={CalculatorStore}>\r\n      <div className={style()}>\r\n        <Display />\r\n        <Memory />\r\n        <Keyboard />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.module.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}